## Performing Arithmetic Operations using Python

2 + 3 + 9
14
99 - 73
26
23.54 * -1432
-33709.28
100 / 7
14.285714285714286
100 // 7
14
100 % 7
2
5 ** 3
125
As you might expect, operators like / and * take precedence over other operators like + and - as per mathematical conventions. You can use parentheses, i.e. ( and ), to specify the order in which operations are performed.

((2 + 5) * (17 - 3)) / (4 ** 3)
1.53125
Python supports the following arithmetic operators:

Operator	Purpose	Example	Result
+	Addition	2 + 3	5
-	Subtraction	3 - 2	1
*	Multiplication	8 * 12	96
/	Division	100 / 7	14.28..
//	Floor Division	100 // 7	14
%	Modulus/Remainder	100 % 7	2
**	Exponent	5 ** 3	125
Try solving some simple problems from this page: https://www.math-only-math.com/worksheet-on-word-problems-on-four-operations.html .

You can use the empty cells below and add more cells if required.

 
 
 
 
Solving multi-step problems using variables
Let's try solving the following word problem using Python:

A grocery store sells a bag of ice for $1.25 and makes a 20% profit. If it sells 500 bags of ice, how much total profit does it make?

We can list out the information provided and gradually convert the word problem into a mathematical expression that can be evaluated using Python.

Cost of ice bag ($) = 1.25

Profit margin = 20% = .2

Profit per bag ($) = profit margin * cost of ice bag = .2 * 1.25

No. of bags = 500

Total profit = no. of bags * profit per bag = 500 * (.2 * 1.25)

500 * (.2 * 1.25)
125.0
Thus, the grocery store makes a total profit of $125. While this is a reasonable way to solve a problem, it's not entirely clear by looking at the code cell what the numbers represent. We can give names to each of the numbers by creating Python variables.

Variables: While working with a programming language such as Python, information is stored in variables. You can think of variables as containers for storing data. The data stored within a variable is called its value.

cost_of_ice_bag = 1.25
profit_margin = .2
number_of_bags = 500
The variables cost_of_ice_bag, profit_margin, and number_of_bags now contain the information provided in the word problem. We can check the value of a variable by typing its name into a cell. We can combine variables using arithmetic operations to create other variables.

Code completion: While typing the name of an existing variable in a code cell within Jupyter, just type the first few characters and press the Tab key to autocomplete the variable's name. Try typing pro in a code cell below and press Tab to autocomplete to profit_margin.

profit_margin
0.2
profit_per_bag = cost_of_ice_bag * profit_margin
profit_per_bag
0.25
total_profit = number_of_bags * profit_per_bag
total_profit
125.0
If you try to view the value of a variable that has not been defined, i.e., given a value using the assignment statement variable_name = value, Python shows an error.

net_profit
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-18-5eb2b296f798> in <module>
----> 1 net_profit

NameError: name 'net_profit' is not defined
Storing and manipulating data using appropriately named variables is a great way to explain what your code does.

Let's display the result of the word problem using a friendly message. We can do this using the print function.

Functions: A function is a reusable set of instructions. It takes one or more inputs, performs certain operations, and often returns an output. Python provides many in-built functions like print and also allows us to define our own functions.

print("The grocery store makes a total profit of $", total_profit)
The grocery store makes a total profit of $ 125.0
print: The print function is used to display information. It takes one or more inputs, which can be text (within quotes, e.g., "this is some text"), numbers, variables, mathematical expressions, etc. We'll learn more about variables & functions in the next tutorial.

Creating a code cell for each variable or mathematical operation can get tedious. Fortunately, Jupyter allows you to write multiple lines of code within a single code cell. The result of the last line of code within the cell is displayed as the output.

Let's rewrite the solution to our word problem within a single cell.

# Store input data in variables
cost_of_ice_bag = 1.25
profit_margin = .2
number_of_bags = 500

# Perform the required calculations
profit_per_bag = cost_of_ice_bag * profit_margin
total_profit = number_of_bags * profit_per_bag

# Display the result
print("The grocery store makes a total profit of $", total_profit)
The grocery store makes a total profit of $ 125.0
Note that we're using the # character to add comments within our code.

Comments: Comments and blank lines are ignored during execution, but they are useful for providing information to humans (including yourself) about what the code does. Comments can be inline (at the end of some code), on a separate line, or even span multiple lines.

Inline and single-line comments start with #, whereas multi-line comments begin and end with three quotes, i.e. """. Here are some examples of code comments:

my_favorite_number = 1 # an inline comment
# This comment gets its own line
my_least_favorite_number = 3
"""This is a multi-line comment.
Write as little or as much as you'd like.

Comments are really helpful for people reading
your code, but try to keep them short & to-the-point.

Also, if you use good variable names, then your code is
often self explanatory, and you may not even need comments!
"""
a_neutral_number = 5
EXERCISE: A travel company wants to fly a plane to the Bahamas. Flying the plane costs 5000 dollars. So far, 29 people have signed up for the trip. If the company charges 200 dollars per ticket, what is the profit made by the company? Create variables for each numeric quantity and use appropriate arithmetic operations.

 
 
 
Evaluating conditions using Python
Apart from arithmetic operations, Python also provides several operations for comparing numbers & variables.

Operator	Description
==	Check if operands are equal
!=	Check if operands are not equal
>	Check if left operand is greater than right operand
<	Check if left operand is less than right operand
>=	Check if left operand is greater than or equal to right operand
<=	Check if left operand is less than or equal to right operand
The result of a comparison operation is either True or False (note the uppercase T and F). These are special keywords in Python. Let's try out some experiments with comparison operators.

my_favorite_number = 1
my_least_favorite_number = 5
a_neutral_number = 3
# Equality check - True
my_favorite_number == 1
True
# Equality check - False
my_favorite_number == my_least_favorite_number
False
# Not equal check - True
my_favorite_number != a_neutral_number
True
# Not equal check - False
a_neutral_number != 3
False
# Greater than check - True
my_least_favorite_number > a_neutral_number
True
# Greater than check - False
my_favorite_number > my_least_favorite_number
False
# Less than check - True
my_favorite_number < 10
True
# Less than check - False
my_least_favorite_number < my_favorite_number
False
# Greater than or equal check - True
my_favorite_number >= 1
True
# Greater than or equal check - False
my_favorite_number >= 3
False
# Less than or equal check - True
3 + 6 <= 9
True
# Less than or equal check - False
my_favorite_number + a_neutral_number <= 3
False
Just like arithmetic operations, the result of a comparison operation can also be stored in a variable.

cost_of_ice_bag = 1.25
is_ice_bag_expensive = cost_of_ice_bag >= 10
print("Is the ice bag expensive?", is_ice_bag_expensive)
Is the ice bag expensive? False
Combining conditions with logical operators
The logical operators and, or and not operate upon conditions and True & False values (also known as booleans). and and or operate on two conditions, whereas not operates on a single condition.

The and operator returns True when both the conditions evaluate to True. Otherwise, it returns False.

a	b	a and b
True	True	True
True	False	False
False	True	False
False	False	False
my_favorite_number
1
my_favorite_number > 0 and my_favorite_number <= 3
True
my_favorite_number < 0 and my_favorite_number <= 3
False
my_favorite_number > 0 and my_favorite_number >= 3
False
True and False
False
True and True
True
The or operator returns True if at least one of the conditions evaluates to True. It returns False only if both conditions are False.

a	b	a or b
True	True	True
True	False	True
False	True	True
False	False	False
a_neutral_number = 3
a_neutral_number == 3 or my_favorite_number < 0
True
a_neutral_number != 3 or my_favorite_number < 0
False
my_favorite_number < 0 or True
True
False or False
False
The not operator returns False if a condition is True and True if the condition is False.

not a_neutral_number == 3
False
not my_favorite_number < 0
True
not False
True
not True
False
Logical operators can be combined to form complex conditions. Use round brackets or parentheses ( and ) to indicate the order in which logical operators should be applied.

(2 > 3 and 4 <= 5) or not (my_favorite_number < 0 and True)
True
not (True and 0 < 1) or (False and True)
False
If parentheses are not used, logical operators are applied from left to right.

not True and 0 < 1 or False and True
False
Experiment with arithmetic, conditional and logical operators in Python using the interactive nature of Jupyter notebooks. We will learn more about variables and functions in future tutorials.

Adding text styles using Markdown
Adding explanations using text cells (like this one) is a great way to make your notebook informative for other readers. It is also useful if you need to refer back to it in the future. You can double click on a text cell within Jupyter to edit it. In the edit mode, you'll notice that the text looks slightly different (for instance, the heading has a ## prefix. This text is written using Markdown, a simple way to add styles to your text. Execute this cell to see the output without the special characters. You can switch back and forth between the source and the output to apply a specific style.

For instance, you can use one or more # characters at the start of a line to create headers of different sizes:

Header 1
Header 2
Header 3
Header 4
To create a bulleted or numbered list, simply start a line with * or 1..

A bulleted list:

Item 1
Item 2
Item 3
A numbered list:

Apple
Banana
Pineapple
You can make some text bold using **, e.g., some bold text, or make it italic using *, e.g., some italic text. You can also create links, e.g., a link. Images are easily embedded too:



Another really nice feature of Markdown is the ability to include blocks of code. Note that code blocks inside Markdown cells cannot be executed.

# Perform the required calculations
profit_per_bag = cost_of_ice_bag * profit_margin
total_profit = number_of_bags * profit_per_bag

# Display the result
print("The grocery store makes a total profit of $", total_profit)



